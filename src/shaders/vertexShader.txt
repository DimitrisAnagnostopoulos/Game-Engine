#version 150

const int MAX_JOINTS = 50;
const int MAX_WEIGHTS = 3;

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;
in ivec3 jointIndices;
in vec3 weights;

out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;

uniform mat4 jointTransforms[MAX_JOINTS];
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

uniform float useFakeLighting;
uniform float animated;

const float density = 0.002;
const float gradient = 5.0;

void main(void){

	vec4 totalLocalPos = vec4(0.0);
	vec4 totalNormal = vec4(0.0);
	
	if(animated > 0.5){
		for(int i=0;i<MAX_WEIGHTS;i++){
			mat4 jointTransform = jointTransforms[jointIndices[i]];
			vec4 posePosition = jointTransform * vec4(position, 1.0);
			totalLocalPos += posePosition * weights[i];
			
			vec4 worldNormal = jointTransform * vec4(normal, 0.0);
			totalNormal += worldNormal * weights[i];
		}
	} else {
		totalLocalPos = vec4(position, 1.0);
		totalNormal = vec4(normal, 0.0);
	}
	
	vec4 worldPosition = transformationMatrix * totalLocalPos;
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * positionRelativeToCam;
	pass_textureCoordinates = textureCoordinates;
	
	vec3 actualNormal = totalNormal.xyz;
	if(useFakeLighting > 0.5){
		actualNormal = vec3(0.0,1.0,0.0);
	}
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
	toLightVector = lightPosition - worldPosition.xyz;
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;

	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density),gradient));
	visibility = clamp(visibility,0.0,1.0);

}